import{u as t}from"./p-db605274.js";import{P as i,b as s,c as h}from"./p-e908516f.js";import{s as e,t as o}from"./p-bb447120.js";import{i as n,e as a}from"./p-161949df.js";import{i as r}from"./p-6a284815.js";var d;!function(t){t[t.width=0]="width",t[t.height=1]="height"}(d||(d={}));class p{constructor(i){this.component=i,this.listeners=[],this.throttledUpdateDimension=t.throttled(200,this.updateDimension),this.throttledUpdateSize=t.throttled(200,this.updateSize),this.debounceMeasure=t.debounce(this.measure),this.boundWindowResize=this.onViewportResize.bind(this),this.onComponentResize=this.onComponentResize.bind(this),this.onLayoutChange=this.onLayoutChange.bind(this)}initialize(t,i,s=!1){this.listeners=e([["componentResize",this.onComponentResize],["layoutChange",this.onLayoutChange]],this.componentRoot,this),this.hasConstrainedHeight=s,this.viewport=i,this.measure(),this.ro=new r((t=>{const i=t[t.length-1],s=i.contentRect.width+2*i.contentRect.left;this.hasConstrainedHeight?this.throttledUpdateSize(s,i.contentRect.height+2*i.contentRect.top):this.throttledUpdateDimension(s,d.width),this.debounceMeasure()})),this.ro.observe(t),this.hasConstrainedHeight||this.viewport.addEventListener("resize",this.boundWindowResize)}shouldRender(){if(this.component.hasValidatedLayoutConstraints)return!0;const t=void 0!==this.component.validatedHeight||parseInt(window.getComputedStyle(this.component.el).height,10)>0;return this.initialize(this.component.el,window,t),!1}deactivate(){this.ro.disconnect(),this.hasConstrainedHeight||this.viewport.removeEventListener("resize",this.boundWindowResize),o(this.listeners,this.componentRoot)}updateType(t){const s=Object.values(i);if(!s.includes(t))throw new Error(`Invalid player type "${t}" passed to player-layout initialize. Valid types are: ${s.join(", ")}`);this.type=t}get componentRoot(){var t,i;return null!==(i=null===(t=this.component.el)||void 0===t?void 0:t.shadowRoot)&&void 0!==i?i:this.component.el}get layout(){return this._layout||s.none}set layout(t){this._layout!==t&&(this._layout=t,this.triggerLayoutEvent())}triggerLayoutEvent(){this.componentRoot.dispatchEvent(new CustomEvent("layoutChange",{detail:{layout:this.layout}}))}triggerResizeEvent(){this.componentRoot.dispatchEvent(new CustomEvent("componentResize",{detail:{width:this.width,height:this.height}}))}onComponentResize(t){this.component.componentResized.emit(t.detail)}onLayoutChange(t){this.component.layoutChanged.emit(t.detail)}onViewportResize(t){this.throttledUpdateDimension(t.target.innerHeight,d.height)}measure(){const t=this.component.el.getBoundingClientRect();this.updateSize(t.width,this.hasConstrainedHeight?t.height:this.viewport.innerHeight)}updateDimension(t,i){i===d.width?this.updateSize(t,this.height):this.updateSize(this.width,t)}updateSize(t,i){t===this.width&&i===this.height||0===t||0===i?void 0===this.currentBreakpoint&&this.determineBreakpoints():(this.width=t,this.height=i,this.determineBreakpoints(),this.triggerResizeEvent())}determineBreakpoints(){const t=this.getBreakpointsForCurrentType();for(const i of t){const t=(void 0===i.minHeight||this.height>=i.minHeight)&&(void 0===i.maxHeight||this.height<i.maxHeight);if((void 0===i.minWidth||this.width>=i.minWidth)&&(void 0===i.maxWidth||this.width<i.maxWidth)&&t)return void(this.layout=i.label)}this.clearBreakpoint()}clearBreakpoint(){this.currentBreakpoint=void 0}getBreakpointsForCurrentType(){return h.breakpoints[this.type]||[]}validateDimensions(){this.validateAndSetSizeDimension(this.component.width,"validatedWidth"),this.validateAndSetSizeDimension(this.component.height,"validatedHeight")}validateAndSetSizeDimension(t,i){n(t)&&(this.component[i]=a(t))}}export{p as P}